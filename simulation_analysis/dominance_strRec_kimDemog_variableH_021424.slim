initialize() {
	
	initializeMutationRate(1.5e-8);
	
	// set dominance coefficients for different deleterious mutation types
	defineConstant("h_neut", 0.5);
	defineConstant("h_nearNeut", 0.45);
	defineConstant("h_wkDel", 0.25);
	defineConstant("h_modDel", 0.15);
	defineConstant("h_strDel", 0.05);
	
	initializeMutationType("m1", h_neut, "s", "return runif(1, -2e-5, 0.0);");
	initializeMutationType("m2", h_nearNeut, "s", "return runif(1, -2e-4, -2e-5);");
	initializeMutationType("m3", h_wkDel, "s", "return runif(1, -2e-3, -2e-4);");
	initializeMutationType("m4", h_modDel, "s", "return runif(1, -2e-2, -2e-3);");
	initializeMutationType("m5", h_strDel, "s", "return runif(1, -1.0, -2e-2);");
	initializeMutationType("m6", h_neut, "f", 0.0); // add sixth mutation type representing synonymous mutations
	
	
	// mutation proportions used to enforce discrete DFE
	// assume ratio of synoymous:nonsynonymous mutations of 2.31:1 (Huber et al. 2017)
	initializeGenomicElementType("g1", c(m1,m2,m3,m4,m5,m6), c(0.2009326, 0.2221936, 0.01764828, 0.285706, 0.2735195, 0.432));
	
	
	// set up 22 autosomes, each with gene_num # of genes
	// set gene_num to result in 20,000-25,000 genes (Keightley 2012 doi: 10.1534/genetics.111.134668)
	gene_num=1023;
	
	
	gene_vec=rep(gene_num,2);
	
	//assume gene length of 1340bp (Keightley 2012 doi: 10.1534/genetics.111.134668)
	//resulting in total sequence length of 26.8-33.5 Mb
	defineConstant("geneLength", 1340);
	
	defineConstant("seqLength", sum(gene_vec)*geneLength);
	
	gene_num=sum(gene_vec);
	
	for (i in 1:gene_num){
		initializeGenomicElement(g1, ((i-1)*geneLength)+(i-1), (i*geneLength)+(i-2) );
	}
	
	rates=NULL;
	
	//assume no recombination within genes, a rate of 1e-3 between genes, and free recombination between chroms
	for (i in 1:(size(gene_vec)-1)){
		rates=c(rates, 0, rep(c(1e-3, 0), asInteger(gene_vec[i-1]-1)), 0.5);
	}
	rates=c(rates, 0, rep(c(1e-3, 0), asInteger(gene_vec[size(gene_vec)-1]-1)));
	
	ends=NULL;
	for (i in 1:gene_num){
		ends=c(ends, (i*geneLength)+(i-2), (i*geneLength)+(i-1));
	}
	ends=ends[0:(size(ends)-2)];
	
	initializeRecombinationRate(rates, ends);

}


///
/// Demography:
/// parameters here taken Kim 2017 1kG model 
/// in tables S1 and S2
/// parameters scaled in terms of diploids and generations

1 early() {
	sim.addSubpop("p1", 12378);
	cat("gen,popSize" + "\n");
	m1.convertToSubstitution = T;
	m2.convertToSubstitution = T;
	m3.convertToSubstitution = T;
	m4.convertToSubstitution = T;
	m5.convertToSubstitution = T;
	m6.convertToSubstitution = T;
}

mutation() {	
	mut.setValue("dom", runif(n=1,min=0,max=mut.mutationType.dominanceCoeff*2));
	return T;
}

mutationEffect(m1) {
	if (homozygous)
		return 1.0 + mut.selectionCoeff;
	else
		return 1.0 + mut.getValue("dom") * mut.selectionCoeff;
}
mutationEffect(m2) {
	if (homozygous)
		return 1.0 + mut.selectionCoeff;
	else
		return 1.0 + mut.getValue("dom") * mut.selectionCoeff;
}
mutationEffect(m3) {
	if (homozygous)
		return 1.0 + mut.selectionCoeff;
	else
		return 1.0 + mut.getValue("dom") * mut.selectionCoeff;
}
mutationEffect(m4) {
	if (homozygous)
		return 1.0 + mut.selectionCoeff;
	else
		return 1.0 + mut.getValue("dom") * mut.selectionCoeff;
}
mutationEffect(m5) {
	if (homozygous)
		return 1.0 + mut.selectionCoeff;
	else
		return 1.0 + mut.getValue("dom") * mut.selectionCoeff;
}

123780 early() {
	p1.setSubpopulationSize(1048);
}

// population growth to 13625 for 1744 generations
124028 early() {
	p1.setSubpopulationSize(13625);
}

// exponential growth for final 497 generations
// to current population size of 659551
125772:126269 early() {
	t = sim.cycle - 125772;
	p1_size = round(13625 * (1 + 0.007831051)^t);
	p1.setSubpopulationSize(asInteger(p1_size));
}


1:126269 late() {
	if (sim.cycle % 1000 == 0 | sim.cycle >= 125772) {
		cat(sim.cycle + "," + p1.individuals.size() + "\n");
	
	}
}


// output SFS at end of simulation
126269 late() {
	sampledHaploidGenomes= sample(p1.genomes, 864);
	nonsynMutationsInSample=unique(c(sampledHaploidGenomes.mutationsOfType(m1),sampledHaploidGenomes.mutationsOfType(m2),sampledHaploidGenomes.mutationsOfType(m3),sampledHaploidGenomes.mutationsOfType(m4),sampledHaploidGenomes.mutationsOfType(m5)));
	nonsyncounts=sampledHaploidGenomes.mutationCountsInGenomes(mutations=nonsynMutationsInSample);
	synMutationsInSample=unique(sampledHaploidGenomes.mutationsOfType(m6));
	syncounts=sampledHaploidGenomes.mutationCountsInGenomes(mutations=synMutationsInSample);
	
	nonsyn_sfs = c();
	syn_sfs = c();
	
	for (i in seq(1,864)){
		ns_count=sum(nonsyncounts==i);
		nonsyn_sfs = c(nonsyn_sfs,ns_count);
		
		syn_count=sum(syncounts==i);
		syn_sfs =c(syn_sfs,syn_count);
	}
	catn("nonsyn sfs:");
	catn(nonsyn_sfs);
	catn("syn sfs:");
	catn(syn_sfs);
}

